// Input; an image path
@cmd_arg("--image-dir", default="part-3/images/clevr.jpg")
type image_directory(directory: String)

// Input; a question
@cmd_arg("--question", default="How many red spheres do we have?")
type question(question: String)

// ==== Constants ====

const size_boundary = 50000

// ==== Foundation Models ====

@owl_vit(
  object_queries=["cube", "sphere", "cylinder"],
  output_fields=["cropped-image", "area"],
  input_obj_count=true,
  score_threshold=0.01,
  score_multiplier=10,
  expand_crop_region=10,
  dump_image=true,
  flatten_probability=true,
)
type vit_segment_image(
  bound img: Tensor,
  bound obj_count: u32,
  id: u32,
  cropped_image: Tensor,
  area: u32,
)

@clip(["cube", "cylinder", "sphere"], prompt="a {{}} shaped object", debug=true)
type classify_shape(bound img: Tensor, color: String)

@clip(["red", "blue", "yellow", "green"], prompt="a {{}} colored object", debug=true)
type classify_color(bound img: Tensor, color: String)

@clip(["shiny metal", "solid rubber"], prompt="an object made out of {{}} material", debug=true)
type classify_material(bound img: Tensor, material: String)

@gpt(
  header="Please convert a question into its programmatic form according to the following language

Expr := Scene() | FilterShape(Expr, String) | FilterMaterial(Expr, String) | FilterColor(Expr, String) | Count(Expr) | Exists(Expr) | GreaterThan(Expr, Expr) | LessThan(Expr, Expr) | Equals(Expr, Expr) | And(Expr, Expr) | Or(Expr, Expr) | SameSize(Expr) | SameColor(Expr) | SameMaterial(Expr) | SameShape(Expr)

Please pick shapes among \"cylinder\", \"cube\", and \"sphere\";
Colors are among \"red\", \"blue\", 'yellow\", and \"green\";
Materials are among \"shiny metal\", \"solid rubber\";
Sizes are among \"large\", \"small\".
  ",
  prompt="Question: {{s}}\nQuery: {{e}}",
  examples=[
    ("How many red objects are there?", "Count(FilterColor(Scene(), \"red\"))"),
    ("Is there a cube?", "Exists(FilterShape(Scene(), \"cube\"))"),
    ("Is there more red objects than blue objects?", "GreaterThan(Count(FilterColor(Scene(), \"red\")), Count(FilterColor(Scene(), \"blue\")))"),
    ("Count the objects having the same size as the blue cube.", "Count(SameSize(FilterShape(FilterColor(Scene(), \"blue\"), \"cube\")))")
  ],
  model="gpt-4",
  debug=true
)
type parse_expr(bound s: String, e: Entity)

// ==== Image Processing ====

rel num_obj = {10}

// Load image
rel image($load_image(dir)) = image_directory(dir)
rel object_segment(obj_id, obj_img, obj_size) = image(img) and num_obj(count) and vit_segment_image(img, count, obj_id, obj_img, obj_size)

// Get all the object colors, shapes, materials, sizes
rel color(obj, c) = object_segment(obj, obj_img, _) and classify_color(obj_img, c)
rel shape(obj, s) = object_segment(obj, obj_img, _) and classify_shape(obj_img, s)
rel material(obj, m) = object_segment(obj, obj_img, _) and classify_material(obj_img, m)
rel size_val(obj, size) = object_segment(obj, obj_img, size) //for debug purposes
rel size(obj, "large") = object_segment(obj, obj_img, size) and size >= size_boundary
rel size(obj, "small") = object_segment(obj, obj_img, size) and size <= size_boundary

// ==== Semantic Parsing ====

// Declare object with filters

rel object(obj_id) = obj_id := top<10>(obj_id: object_segment(obj_id, obj_img, _))

type Expr = Scene() | FilterShape(Expr, String) | FilterMaterial(Expr, String) | FilterColor(Expr, String) | FilterSize(Expr, String) | Count(Expr) | Exists(Expr) | GreaterThan(Expr, Expr) | LessThan(Expr, Expr) | Equals(Expr, Expr) | And(Expr, Expr) | Or(Expr, Expr) | SameSize(Expr) | SameColor(Expr) | SameMaterial(Expr) | SameShape(Expr)

rel eval_obj(e, o) = case e is Scene() and object(o)
rel eval_obj(e, o) = case e is FilterShape(e1, s) and eval_obj(e1, o) and shape(o, s)
rel eval_obj(e, o) = case e is FilterColor(e1, c) and eval_obj(e1, o) and color(o, c)
rel eval_obj(e, o) = case e is FilterMaterial(e1, m) and eval_obj(e1, o) and material(o, m)
rel eval_obj(e, o) = case e is FilterSize(e1, s) and eval_obj(e1, o) and size(o, s)
rel eval_obj(e, p) = case e is SameSize(e1) and eval_obj(e1, o) and size(o, s) and size(p, s) and o != p
rel eval_obj(e, p) = case e is SameColor(e1) and eval_obj(e1, o) and color(o, c) and color(p, c) and o != p
rel eval_obj(e, p) = case e is SameMaterial(e1) and eval_obj(e1, o) and material(o, m) and material(p, m) and o != p
rel eval_obj(e, p) = case e is SameShape(e1) and eval_obj(e1, o) and shape(o, s) and shape(p, s) and o != p
rel eval_num(e, n) = n := count(o: eval_obj(e1, o) where e: case e is Count(e1))
rel eval_bool(e, b) = b := exists(o: eval_obj(e1, o) where e: case e is Exists(e1))
rel eval_bool(e, n1 > n2) = eval_num(e1, n1), eval_num(e2, n2), case e is GreaterThan(e1,e2)
rel eval_bool(e, n1 < n2) = eval_num(e1, n1), eval_num(e2, n2), case e is LessThan(e1,e2)
rel eval_bool(e, n1 == n2) = eval_num(e1, n1), eval_num(e2, n2), case e is Equals(e1,e2)
rel eval_bool(e, b1 && b2) = eval_bool(e1, b1), eval_bool(e2,b2), case e is And(e1,e2)
rel eval_bool(e, b1 || b2) = eval_bool(e1, b1), eval_bool(e2,b2), case e is Or(e1,e2)

rel ret_ty(e, "bool") = case e is GreaterThan(_,_) or case e is Exists(_) or case e is LessThan(_, _) or case e is Equals(_,_) or case e is And(_,_) or case e is Or(_,_)
rel ret_ty(e, "int") = case e is Count(_)

rel eval_result(e, b as String) = ret_ty(e, "bool") and eval_bool(e, b)
rel eval_result(e, n as String) = ret_ty(e, "int") and eval_num(e, n)

rel parsed_expr(e) = question(q) and parse_expr(q, e)
rel result(r) = parsed_expr(e) and eval_result(e, r)

// ==== Get the result ====
query result